definitions:
  entity.Project:
    properties:
      created_at:
        type: string
      deleted:
        type: boolean
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      token_id:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  entity.Source:
    properties:
      createdAt:
        type: string
      deleted:
        type: boolean
      deletedAt:
        type: string
      description:
        type: string
      id:
        type: string
      metadata:
        $ref: '#/definitions/entity.SourceMetadata'
      name:
        type: string
      ownerID:
        type: string
      projectID:
        type: string
      status:
        $ref: '#/definitions/entity.Status'
      updatedAt:
        type: string
      writeKey:
        type: string
    type: object
  entity.SourceMetadata:
    properties:
      category:
        type: string
      id:
        type: string
      name:
        type: string
      slug:
        type: string
    type: object
  entity.Status:
    enum:
    - active
    - not active
    type: string
    x-enum-varnames:
    - SourceStatusActive
    - SourceStatusNotActive
  httputil.HTTPError:
    properties:
      message:
        example: status bad request
        type: string
    type: object
  param.LoginRequest:
    properties:
      email:
        example: name@test.com
        type: string
      password:
        example: 123Qwe!@#
        type: string
    type: object
  param.LoginResponse:
    properties:
      token:
        $ref: '#/definitions/param.Token'
      user:
        $ref: '#/definitions/param.UserInfo'
    type: object
  param.RegisterRequest:
    properties:
      email:
        example: name@test.com
        type: string
      name:
        example: name
        type: string
      password:
        example: 123Qwe!@#
        type: string
    type: object
  param.RegisterResponse:
    properties:
      email:
        example: name@test.com
        type: string
      id:
        example: f90631e0-aad3-4eb1-8cef-1478711e16e9
        type: string
    type: object
  param.Token:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  param.UserInfo:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      email:
        type: string
      id:
        type: string
      updatedAt:
        type: string
    type: object
  projectparam.CreateRequest:
    properties:
      description:
        example: description
        type: string
      name:
        example: name
        type: string
    type: object
  projectparam.CreateResponse:
    properties:
      project:
        $ref: '#/definitions/entity.Project'
    type: object
  projectparam.DeleteResponse:
    properties:
      message:
        type: string
    type: object
  projectparam.ListResponse:
    properties:
      has_more:
        type: boolean
      last_token:
        type: integer
      per_page:
        type: integer
      projects:
        items:
          $ref: '#/definitions/entity.Project'
        type: array
    type: object
  projectparam.UpdateRequest:
    properties:
      description:
        example: description
        type: string
      name:
        example: name
        type: string
    type: object
  projectparam.UpdateResponse:
    properties:
      project:
        $ref: '#/definitions/entity.Project'
    type: object
  sourceparam.CreateRequest:
    properties:
      description:
        example: description
        type: string
      name:
        example: test
        type: string
      project_id:
        type: string
    type: object
  sourceparam.CreateResponse:
    properties:
      source:
        $ref: '#/definitions/entity.Source'
    type: object
  sourceparam.ListResponse:
    properties:
      has_more:
        type: boolean
      last_token:
        type: integer
      per_page:
        type: integer
      sources:
        items:
          $ref: '#/definitions/entity.Source'
        type: array
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
paths:
  /health-check:
    get:
      consumes:
      - application/json
      description: get service health check
      produces:
      - application/json
      responses: {}
      summary: Show health check
      tags:
      - healthCheck
  /projects:
    get:
      consumes:
      - application/json
      description: List projects
      parameters:
      - description: Last token fetched
        in: query
        name: last_token_id
        type: string
      - description: Per page count
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/projectparam.ListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - JWTToken: []
      summary: List projects
      tags:
      - Project
    post:
      consumes:
      - application/json
      description: Create project
      parameters:
      - description: Create project request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/projectparam.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/projectparam.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - JWTToken: []
      summary: Create project
      tags:
      - Project
  /projects/{project_id}:
    delete:
      consumes:
      - application/json
      description: Delete project
      parameters:
      - description: Project identifier
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/projectparam.DeleteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - JWTToken: []
      summary: Delete project
      tags:
      - Project
    post:
      consumes:
      - application/json
      description: Update project
      parameters:
      - description: Project identifier
        in: path
        name: project_id
        required: true
        type: string
      - description: Update project request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/projectparam.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/projectparam.UpdateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - JWTToken: []
      summary: Update project
      tags:
      - Project
  /sources:
    get:
      consumes:
      - application/json
      description: List sources
      parameters:
      - description: Last token fetched
        in: query
        name: last_token_id
        type: string
      - description: Per page count
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/sourceparam.ListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - JWTToken: []
      summary: List sources
      tags:
      - Source
    post:
      consumes:
      - application/json
      description: Create source
      parameters:
      - description: Create source request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/sourceparam.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/sourceparam.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - JWTToken: []
      summary: Create source
      tags:
      - Source
  /users/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: Login request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/param.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/param.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - JWTToken: []
      summary: Login user
      tags:
      - User
  /users/register:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: Register request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/param.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/param.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - JWTToken: []
      summary: Login user
      tags:
      - User
securityDefinitions:
  JWTToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
